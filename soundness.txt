C Programs
==========

Target soundness statement:
If "verifast A.c B.c C.c" succeeds, then "gcc -o ./program.exe A.c B.c C.c && ./program.exe" does not throw any assertion failures.

Known VeriFast unsoundnesses:
- linking correctness: ensure header files have the same meaning in all modules
- linking correctness: prevent duplicate struct definitions and duplicate predicate definitions
- predicate preciseness analysis: does not deal correctly with the local variable scopes induced by conditional assertions and switch assertions
- disallow the use of regular function pointers as predicate family indices in unloadable modules. (Note: using lemma function pointers as predicate family indices is fine.)
- VeriFast assumes that the C compiler does not assume that the C program obeys strict aliasing rules.
  For example, gcc -O2 assumes that a pointer-to-float does not alias a pointer-to-int, and therefore that an assignment through one of these
  does not affect the value at the other location.
  VeriFast does not check that the program obeys strict aliasing rules. Therefore, VeriFast is currently unsound for gcc -O2.
  However, this unsoundness does not apply to gcc -O2 -fno-strict-aliasing.
- The C standard says that reading an uninitialized variable or using the value so obtained can cause a trap. VeriFast does not check that the program does not read or use uninitialized variables.
- I am not 100% sure that a statement of the form "x = foo();" where x is a global and foo modifies x is allowed by the C standard. VeriFast allows this statement.

Java Programs
=============

Target soundness statement:
If "javac A.java B.java C.java" succeeds, and program.jarsrc contains the following lines:

A.java
B.java
C.java
main-class A

and "verifast -c program.jarsrc" succeeds, then "java A" does not throw any assertion failures.

Known VeriFast unsoundnesses:
- Java: ClassCastExceptions are currently not prevented
- ghost variables (which can hide fields) can appear in the argument of the Java assert statement
- Spec of List.remove: this method uses Object.equals instead of == but the spec assumes it uses ==
- Spec of Selector.selectedKeys: states that the selected-keys set does not contain any cancelled keys. This is not true.
