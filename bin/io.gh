/**
 * io.gh - input/output fundamental predicate and lemma declarations.
 *
 * This file is the simplified version; it is not suitable for memory-based
 * input/output (i.e. input/output-style contracts for programs doing
 * memory-based operations).
 */

#ifndef IO_IO_H
#define IO_IO_H

inductive iostate = iostate(int);
inductive time = time(int);

/**
 * Expresses t is one of the current times. Time can be advanced
 * by performing I/O actions.
 */
predicate time(time t);

/**
 * Expresses the permission to split one time in two times.
 * Example specification:
 *   time(?t1) &*& split(t1, ?t_left, ?t_right)
 *   &*& action1_io(t_left, ?t_left2)
 *   &*& action2_io(t_right, ?t_right2)
 *   &*& join(t_left2, t_right2, ?t3)
 *   &*& action3_io(t3, ?t4)
 * The action action1_io and action2_io can be executed in
 * any ordering or parallel. Note that if action1_io and action2_io
 * consists of actions, the actions of action1_io can be interleaved
 * in any way with the actions of action2_io.
 *
 * Join expresses the permission to join two times into one time.
 * In the above example, action3_io can only be executed if
 * both action1_io and action2_io are finished.
 */
predicate split(time t1; time t2, time t3);

/**
 * See: the split predicate.
 */
predicate join(time t1, time t2; time t3);

lemma void join();
    requires join(?t1, ?t2, ?t3)
        &*& time(t1) &*& time(t2);
    ensures time(t3);

/**
 * Like the lemma join(), but prevents consuming the wrong join permission.
 */
lemma void join_specific(time t1);
    requires join(t1, ?t2, ?t3)
        &*& time(t1) &*& time(t2);
    ensures time(t3);

lemma void split();
    requires split(?t1, ?t2, ?t3) &*& time(t1);
    ensures time(t2) &*& time(t3);

lemma void split_specific(time t1);
    requires split(t1, ?t2, ?t3) &*& time(t1);
    ensures time(t2) &*& time(t3);


#endif
