package java.net;

import java.io.*;

/*@

predicate ServerSocket(ServerSocket serverSocket);
predicate Socket(Socket socket, InputStream inputStream, any inputStreamInfo, OutputStream outputStream, any outputStreamInfo);

@*/

public class Socket {
    public Socket(String host, int port);
        //@ requires emp;
        //@ ensures Socket(result, ?in, ?inInfo, ?out, ?outInfo) &*& InputStream(in.getClass())(in, inInfo) &*& OutputStream(out.getClass())(out, outInfo);
    
    public InputStream getInputStream();
        //@ requires Socket(this, ?in, ?inInfo, ?out, ?outInfo);
        //@ ensures Socket(this, in, inInfo, out, outInfo) &*& result == in;
    
    public OutputStream getOutputStream();
        //@ requires Socket(this, ?in, ?inInfo, ?out, ?outInfo);
        //@ ensures Socket(this, in, inInfo, out, outInfo) &*& result == out;
    
    public void shutdownOutput();
        //@ requires Socket(this, ?in, ?inInfo, ?out, ?outInfo);
        //@ ensures Socket(this, in, inInfo, out, outInfo);
    
    public void close();
      //@ requires Socket(this, ?in, ?inInfo, ?out, ?outInfo) &*& InputStream(in.getClass())(in, inInfo) &*& OutputStream(out.getClass())(out, outInfo);
      //@ ensures emp;
}

public class ServerSocket {
    public ServerSocket(int port);
        //@ requires emp;
        //@ ensures ServerSocket(result);
    
    public Socket accept();
        //@ requires ServerSocket(this);
        //@ ensures result!= null &*& ServerSocket(this) &*& Socket(result, ?in, ?inInfo, ?out, ?outInfo) &*& InputStream(in.getClass())(in, inInfo) &*& OutputStream(out.getClass())(out, outInfo);
}