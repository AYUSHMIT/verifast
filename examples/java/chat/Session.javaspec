package chat;

import java.util.*;
import wrapper.net.*;
import wrapper.util.concurrent.*;
import wrapper.io.*;
import wrapper.lang.*;
/*@

predicate_ctor room_ctor(Room room)()
    requires room(room);

predicate session(Session session)
    requires session.room |-> ?room &*& session.room_lock |-> ?roomLock &*& session.socket |-> ?socket &*& socket(socket, ?reader, ?writer)
        &*& [?f]lock(roomLock, room_ctor(room)) &*& reader(reader) &*& writer(writer);

predicate_family_instance thread_run_pre(Session.class)(Session session, any info)
  requires session(session);

@*/
public class Session implements Runnable{
  Room room;
  Semaphore_ room_lock;
  Socket_ socket;
  Session(Room room,Semaphore_ roomLock,Socket_ socket);
    //@ requires [?f]lock(roomLock, room_ctor(room)) &*& socket(socket, ?reader, ?writer) &*& reader(reader) &*& writer(writer);
    //@ ensures session(result);
  void run_with_nick(Room room,Semaphore_ roomLock,InputStreamReader_ reader,OutputStreamWriter_ writer, StringBuffer nick);
    //@ requires [?f]lock(roomLock, room_ctor(room)) &*& room(room) &*& reader(reader) &*& writer(writer) &*& string_buffer(nick);
    //@ ensures [f]lock(roomLock, room_ctor(room)) &*& reader(reader) &*& writer(writer) &*& string_buffer(nick);
  void run();
    //@ requires thread_run_pre(?c)(this,_) &*& c==this.getClass();
    //@ ensures true;
}