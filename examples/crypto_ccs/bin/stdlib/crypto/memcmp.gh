#ifndef MEMCMP_GH
#define MEMCMP_GH

#include "cryptogram.gh"

fixpoint option<list<crypto_char> > memcmp_payload_rec(cryptogram cg)
{
  switch(cg)
  {
    case cg_hash(ccs):         return some(ccs);
    case cg_hmac(p1, c1, ccs): return some(ccs);
    default: return none;
  }
}

predicate memcmp_ccs(crypto_chars_kind kind, list<crypto_char> ccs) =
  switch(kind)
  {
    case normal: return
      [_]public_ccs(ccs);
    case secret: return
      [_]exists(?cg) &*& sublist(ccs_for_cg(cg), ccs) && cg_is_gen_or_pub(cg) &*&
      switch(memcmp_payload_rec(cg))
      {
        case none:
          return true;
        case some(ccs0):
          return [_]memcmp_ccs(_, ccs0);
      };
  };

#define MEMCMP_CCS(KIND, CCS) \
{ \
  close memcmp_ccs(KIND, CCS); \
  leak memcmp_ccs(KIND, CCS); \
}

#define MEMCMP_PUB(BUFFER) \
{ \
  assert [?f00]crypto_chars(normal, BUFFER, ?size00, ?ccs00); \
  public_ccs(BUFFER, size00); \
  MEMCMP_CCS(normal, ccs00); \
}

#define MEMCMP_SEC(BUFFER, CG) \
{ \
  assert [?f00]crypto_chars(secret, BUFFER, _, ?ccs00); \
  assert ccs_for_cg(CG) == ccs00; \
  sublist_refl(ccs00); \
  close exists(CG); \
  leak exists(CG); \
  MEMCMP_CCS(secret, ccs00); \
}

#endif
