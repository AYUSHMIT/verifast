#ifndef PUBLIC_INVARIANT_GH
#define PUBLIC_INVARIANT_GH

#include "principals.gh"
#include "crypto_chars.gh"

require_module public_invariant_mod;

predicate public_invar(predicate(cryptogram) pub);

lemma void public_invariant_init(predicate(cryptogram) pub);
  requires module(public_invariant_mod, true);
  ensures  module(public_invariant_mod, false) &*&
           [_]public_invar(pub);

predicate_ctor public_generated(predicate(cryptogram) pub)(list<char> cs) =
  [_]dummy_foreach(cgs_in_chars(cs), pub) &*&
  true == forall(cgs_in_chars(cs), cg_is_generated)
;

typedef lemma void bad_random_is_public(predicate(cryptogram) pub,
                                        predicate() proof_pred)
                                       (cryptogram random);
  requires  proof_pred() &*&
            random == cg_random(?p, _) &*& true == bad(p);
  ensures   proof_pred() &*&
            [_]pub(random);

typedef lemma void bad_key_is_public(predicate(cryptogram) pub,
                                     predicate() proof_pred)
                                    (cryptogram key);
  requires  proof_pred() &*&
            key == cg_symmetric_key(?p, _) &*&
            true == bad(p);
  ensures   proof_pred() &*&
            [_]pub(key);

typedef lemma void public_key_is_public(predicate(cryptogram) pub,
                                        predicate() proof_pred)
                                       (cryptogram key);
  requires  proof_pred() &*&
            key == cg_public_key(_, _);
  ensures   proof_pred() &*&
            [_]pub(key);

typedef lemma void bad_private_key_is_public(predicate(cryptogram) pub,
                                             predicate() proof_pred)
                                            (cryptogram key);
  requires  proof_pred() &*&
            key == cg_private_key(?p, _) &*&
            true == bad(p);
  ensures   proof_pred() &*&
            [_]pub(key);

typedef lemma void hash_is_public(predicate(cryptogram) pub,
                                  predicate() proof_pred)
                                 (cryptogram hash);
  requires  proof_pred() &*&
            hash == cg_hash(?pay) &*&
            length(pay) <= INT_MAX &*&
            [_]public_generated(pub)(pay);
  ensures   proof_pred() &*&
            [_]pub(hash);

typedef lemma void public_hmac_is_public(predicate(cryptogram) pub,
                                         predicate() proof_pred)
                                        (cryptogram hmac);
  requires  proof_pred() &*&
            hmac == cg_hmac(?p, ?c, ?pay) &*&
            length(pay) <= INT_MAX &*&
            [_]pub(cg_symmetric_key(p, c)) &*&
            [_]public_generated(pub)(pay);
  ensures   proof_pred() &*&
            [_]pub(hmac);

typedef lemma void public_encryption_is_public(predicate(cryptogram) pub,
                                               predicate() proof_pred)
                                              (cryptogram encrypted);
  requires  proof_pred() &*&
            encrypted == cg_encrypted(?p, ?c, ?pay, ?ent) &*&
            length(pay) <= INT_MAX &*&
            [_]pub(cg_symmetric_key(p, c)) &*&
            [_]public_generated(pub)(pay);
  ensures   proof_pred() &*&
            [_]pub(encrypted);

typedef lemma void public_decryption_is_public(predicate(cryptogram) pub,
                                               predicate() proof_pred)
                                              (cryptogram key,
                                               cryptogram encrypted);
  requires  proof_pred() &*&
            key == cg_symmetric_key(?p, ?c) &*&
            encrypted == cg_encrypted(p, c, ?pay, ?ent) &*&
            [_]pub(key) &*&
            [_]pub(encrypted);
  ensures   proof_pred() &*&
            [_]public_generated(pub)(pay);

typedef lemma void decryption_allowed(predicate(cryptogram) pub,
                                      predicate() proof_pred)
                                     (cryptogram key, list<char> cs);
  requires  proof_pred() &*&
            key == cg_symmetric_key(?p, ?c) &*&
            [_]public_generated(pub)(cs);
  ensures   proof_pred() &*&
            exists<cryptogram>(?cg_pay) &*&
            [_]pub(cg_encrypted(p, c, chars_for_cg(cg_pay), _));

typedef lemma void public_auth_encryption_is_public(predicate(cryptogram) pub,
                                                    predicate() proof_pred)
                                                   (cryptogram encrypted);
  requires  proof_pred() &*&
            encrypted == cg_auth_encrypted(?p, ?c, ?mac, ?pay, ?ent) &*&
            length(pay) <= INT_MAX &*&
            [_]pub(cg_symmetric_key(p, c)) &*&
            [_]public_generated(pub)(pay);
  ensures   proof_pred() &*&
            [_]pub(encrypted);

typedef lemma void public_auth_decryption_is_public(predicate(cryptogram) pub,
                                                    predicate() proof_pred)
                                                   (cryptogram key,
                                                    cryptogram encrypted);
  requires  proof_pred() &*&
            key == cg_symmetric_key(?p, ?c) &*&
            encrypted == cg_auth_encrypted(p, c, ?mac, ?pay, ?ent) &*&
            [_]pub(key) &*&
            [_]pub(encrypted);
  ensures   proof_pred() &*&
            [_]public_generated(pub)(pay);

typedef lemma void public_asym_encryption_is_public(predicate(cryptogram) pub,
                                                    predicate() proof_pred)
                                                   (cryptogram encrypted);
  requires  proof_pred() &*&
            encrypted == cg_asym_encrypted(?p, ?c, ?pay, ?ent) &*&
            length(pay) <= INT_MAX &*&
            [_]pub(cg_public_key(p, c)) &*&
            [_]public_generated(pub)(pay);
  ensures   proof_pred() &*&
            [_]pub(encrypted);

typedef lemma void public_asym_decryption_is_public(predicate(cryptogram) pub,
                                                    predicate() proof_pred)
                                                   (cryptogram key,
                                                    cryptogram encrypted);
  requires  proof_pred() &*&
            key == cg_private_key(?p, ?c) &*&
            encrypted == cg_asym_encrypted(p, c, ?pay, ?ent) &*&
            [_]pub(key) &*&
            [_]pub(encrypted);
  ensures   proof_pred() &*&
            [_]public_generated(pub)(pay);

typedef lemma void public_asym_signature_is_public(predicate(cryptogram) pub,
                                                   predicate() proof_pred)
                                                  (cryptogram sig);
  requires  proof_pred() &*&
            sig == cg_asym_signature(?p, ?c, ?pay, ?ent) &*&
            length(pay) <= INT_MAX &*&
            [_]pub(cg_private_key(p, c)) &*&
            [_]public_generated(pub)(pay);
  ensures   proof_pred() &*&
            [_]pub(sig);

predicate public_invariant_constraints(predicate(cryptogram) pub,
                                       predicate() pred) =
  is_bad_random_is_public(_, pub, pred) &*&
  is_bad_key_is_public(_, pub, pred) &*&
  is_public_key_is_public(_, pub, pred) &*&
  is_bad_private_key_is_public(_, pub, pred) &*&
  is_hash_is_public(_, pub, pred) &*&
  is_public_hmac_is_public(_, pub, pred) &*&
  is_public_encryption_is_public(_, pub, pred) &*&
  is_public_decryption_is_public(_, pub, pred) &*&
  is_decryption_allowed(_, pub, pred) &*&
  is_public_auth_encryption_is_public(_, pub, pred) &*&
  is_public_auth_decryption_is_public(_, pub, pred) &*&
  is_public_asym_encryption_is_public(_, pub, pred) &*&
  is_public_asym_decryption_is_public(_, pub, pred) &*&
  is_public_asym_signature_is_public(_, pub, pred)
;

#define PRODUCE_IS_DECRYPTION_ALLOWED(PREFIX) \
produce_lemma_function_pointer_chunk(decryption_allowed) : \
  decryption_allowed(PREFIX##_pub, PREFIX##_proof_pred) \
                    (PREFIX##_key, PREFIX##_key){ call(); };

#define PUBLIC_INVARIANT_CONSTRAINTS(PREFIX) \
{ \
produce_lemma_function_pointer_chunk(PREFIX##_bad_random_is_public) : \
  bad_random_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                      (PREFIX##_random){ call(); }; \
  \
produce_lemma_function_pointer_chunk(PREFIX##_bad_key_is_public) : \
  bad_key_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                   (PREFIX##_key){ call(); }; \
  \
produce_lemma_function_pointer_chunk(public_key_is_public) : \
  public_key_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                      (PREFIX##_random){ call(); }; \
  \
produce_lemma_function_pointer_chunk(PREFIX##_bad_private_key_is_public) : \
  bad_private_key_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                           (PREFIX##_random){ call(); }; \
  \
produce_lemma_function_pointer_chunk(PREFIX##_hash_is_public) : \
  hash_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                (PREFIX##_hash){ call(); }; \
  \
produce_lemma_function_pointer_chunk(public_hmac_is_public) : \
  public_hmac_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                       (PREFIX##_hmac){ call(); }; \
  \
produce_lemma_function_pointer_chunk(public_encryption_is_public) : \
  public_encryption_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                             (PREFIX##_encrypted){ call(); }; \
  \
produce_lemma_function_pointer_chunk(public_decryption_is_public) : \
  public_decryption_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                             (PREFIX##_key, PREFIX##_encrypted){ call(); }; \
  \
PRODUCE_IS_DECRYPTION_ALLOWED(PREFIX) \
  \
produce_lemma_function_pointer_chunk(public_auth_encryption_is_public) : \
  public_auth_encryption_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                                  (PREFIX##_encrypted){ call(); }; \
  \
produce_lemma_function_pointer_chunk(public_auth_decryption_is_public) : \
  public_auth_decryption_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                                  (PREFIX##_key, PREFIX##_encrypted){ call(); }; \
  \
produce_lemma_function_pointer_chunk(public_asym_encryption_is_public) : \
  public_asym_encryption_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                                  (PREFIX##_encrypted){ call(); }; \
produce_lemma_function_pointer_chunk(public_asym_decryption_is_public) : \
  public_asym_decryption_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                                  (PREFIX##_key, PREFIX##_encrypted){ call(); }; \
  \
produce_lemma_function_pointer_chunk(public_asym_signature_is_public) : \
  public_asym_signature_is_public(PREFIX##_pub, PREFIX##_proof_pred) \
                                 (PREFIX##_sig){ call(); }; \
  \
close public_invariant_constraints(PREFIX##_pub, PREFIX##_proof_pred); \
}

#define PUBLIC_INVARIANT_PROOFS(PREFIX) \
  DEFAULT_IS_PUBLIC_RANDOM(PREFIX) \
  DEFAULT_IS_PUBLIC_KEY(PREFIX) \
  DEFAULT_IS_PUBLIC_PUBLIC_KEY(PREFIX) \
  DEFAULT_IS_PUBLIC_PRIVATE_KEY(PREFIX) \
  DEFAULT_IS_PUBLIC_HASH(PREFIX) \
  DEFAULT_IS_PUBLIC_HMAC(PREFIX) \
  DEFAULT_IS_PUBLIC_ENCRYPTED(PREFIX) \
  DEFAULT_IS_PUBLIC_DECRYPTED(PREFIX) \
  DEFAULT_IS_DECRYPTION_ALLOWED(PREFIX) \
  DEFAULT_IS_PUBLIC_AUTH_ENCRYPTED(PREFIX) \
  DEFAULT_IS_PUBLIC_AUTH_DECRYPTED(PREFIX) \
  DEFAULT_IS_PUBLIC_ASYMMETRIC_ENCRYPTED(PREFIX) \
  DEFAULT_IS_PUBLIC_ASYMMETRIC_DECRYPTED(PREFIX) \
  DEFAULT_IS_PUBLIC_ASYMMETRIC_SIGNATURE(PREFIX) \

#define DEFAULT_IS_PUBLIC_RANDOM(PREFIX) \
lemma void PREFIX##_bad_random_is_public(cryptogram random) \
  requires random == cg_random(?p, _) &*& \
           true == bad(p); \
  ensures  [_]PREFIX##_pub(random); \
{ \
  close PREFIX##_pub(random); \
  leak PREFIX##_pub(random); \
}

#define DEFAULT_IS_PUBLIC_KEY(PREFIX) \
lemma void PREFIX##_bad_key_is_public(cryptogram key) \
  requires key == cg_symmetric_key(?p, _) &*& \
           true == bad(p); \
  ensures  [_]PREFIX##_pub(key); \
{ \
  close PREFIX##_pub(key); \
  leak PREFIX##_pub(key); \
}

#define DEFAULT_IS_PUBLIC_PUBLIC_KEY(PREFIX) \
lemma void public_key_is_public(cryptogram key) \
  requires key == cg_public_key(_, _); \
  ensures  [_]PREFIX##_pub(key); \
{ \
  close PREFIX##_pub(key); \
  leak PREFIX##_pub(key); \
}

#define DEFAULT_IS_PUBLIC_PRIVATE_KEY(PREFIX) \
lemma void PREFIX##_bad_private_key_is_public(cryptogram key) \
  requires key == cg_private_key(?p, _) &*& \
           bad(p) == true; \
  ensures  [_]PREFIX##_pub(key); \
{ \
  close PREFIX##_pub(key); \
  leak PREFIX##_pub(key); \
}

#define DEFAULT_IS_PUBLIC_HASH(PREFIX) \
lemma void PREFIX##_hash_is_public(cryptogram hash) \
  requires hash == cg_hash(?pay) &*& \
           length(pay) <= INT_MAX &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(hash); \
{ \
  close PREFIX##_pub(hash); \
  leak PREFIX##_pub(hash); \
}

#define DEFAULT_IS_PUBLIC_HMAC(PREFIX) \
lemma void public_hmac_is_public(cryptogram hmac) \
  requires hmac == cg_hmac(?p, ?c, ?pay) &*& \
           length(pay) <= INT_MAX &*& \
           [_]PREFIX##_pub(cg_symmetric_key(p, c)) &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(hmac); \
{ \
  open [_]PREFIX##_pub(cg_symmetric_key(p, c)); \
  POLARSSL_SWITCH_1(PREFIX, cg_symmetric_key(p, c)); \
  close PREFIX##_pub(hmac); \
  leak PREFIX##_pub(hmac); \
}

#define DEFAULT_IS_PUBLIC_ENCRYPTED(PREFIX) \
lemma void public_encryption_is_public(cryptogram encrypted) \
  requires encrypted == cg_encrypted(?p, ?c, ?pay, ?ent) &*& \
           length(pay) <= INT_MAX &*& \
           [_]PREFIX##_pub(cg_symmetric_key(p, c)) &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(encrypted); \
{ \
  open  [_]PREFIX##_pub(cg_symmetric_key(p, c)); \
  POLARSSL_SWITCH_1(PREFIX, cg_symmetric_key(p, c)); \
  close PREFIX##_pub(encrypted); \
  leak PREFIX##_pub(encrypted); \
}

#define DEFAULT_IS_PUBLIC_DECRYPTED(PREFIX) \
lemma void public_decryption_is_public(cryptogram key, \
                                                    cryptogram encrypted) \
  requires key == cg_symmetric_key(?p, ?c) &*& \
           encrypted == cg_encrypted(p, c, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(key) &*& \
           [_]PREFIX##_pub(encrypted); \
  ensures  [_]public_generated(PREFIX##_pub)(pay); \
{ \
  open  [_]PREFIX##_pub(key); \
  open  [_]PREFIX##_pub(encrypted); \
  \
  POLARSSL_SWITCH_1(PREFIX, cg_symmetric_key(p, c)); \
}

#define DEFAULT_IS_DECRYPTION_ALLOWED(PREFIX) \
lemma void decryption_allowed(cryptogram key, list<char> cs) \
  requires key == cg_symmetric_key(?p, ?c) &*& \
           [_]public_generated(PREFIX##_pub)(cs); \
  ensures  exists<cryptogram>(?cg_pay) &*& \
           [_]PREFIX##_pub(cg_encrypted(p, c, chars_for_cg(cg_pay), _)); \
{ \
  cryptogram cg; \
  if (PREFIX##_public_key(p, c)) \
  { \
    close PREFIX##_pub(key); \
    leak PREFIX##_pub(key); \
    cg = chars_for_cg_sur_random(cs); \
  } \
  else \
  { \
    cg = cg_symmetric_key(p, c); \
  } \
  close exists(cg); \
  cryptogram cg_enc = cg_encrypted(p, c, chars_for_cg(cg), nil); \
  close PREFIX##_pub(cg_enc); \
  leak PREFIX##_pub(cg_enc); \
}

#define DEFAULT_IS_PUBLIC_AUTH_ENCRYPTED(PREFIX) \
lemma void public_auth_encryption_is_public(cryptogram encrypted) \
  requires encrypted == cg_auth_encrypted(?p, ?c, ?mac, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(cg_symmetric_key(p, c)) &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(encrypted); \
{ \
  open  [_]PREFIX##_pub(cg_symmetric_key(p, c)); \
  POLARSSL_SWITCH_1(PREFIX, cg_symmetric_key(p, c)); \
  close PREFIX##_pub(encrypted); \
  leak PREFIX##_pub(encrypted); \
}

#define DEFAULT_IS_PUBLIC_AUTH_DECRYPTED(PREFIX) \
lemma void public_auth_decryption_is_public(cryptogram key, \
                                                         cryptogram encrypted) \
  requires key == cg_symmetric_key(?p, ?c) &*& \
           encrypted == cg_auth_encrypted(p, c, ?mac, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(key) &*& \
           [_]PREFIX##_pub(encrypted); \
  ensures  [_]public_generated(PREFIX##_pub)(pay); \
{ \
  open  [_]PREFIX##_pub(key); \
  open  [_]PREFIX##_pub(encrypted); \
  \
  POLARSSL_SWITCH_1(PREFIX, cg_symmetric_key(p, c)); \
}

#define DEFAULT_IS_PUBLIC_ASYMMETRIC_ENCRYPTED(PREFIX) \
lemma void public_asym_encryption_is_public(cryptogram encrypted) \
  requires encrypted == cg_asym_encrypted(?p, ?c, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(cg_public_key(p, c)) &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(encrypted); \
{ \
  open  [_]PREFIX##_pub(cg_public_key(p, c)); \
  POLARSSL_SWITCH_1(PREFIX, cg_public_key(p, c)); \
  close PREFIX##_pub(encrypted); \
  leak PREFIX##_pub(encrypted); \
}

#define DEFAULT_IS_PUBLIC_ASYMMETRIC_DECRYPTED(PREFIX) \
lemma void public_asym_decryption_is_public(cryptogram key, \
                                            cryptogram encrypted) \
  requires key == cg_private_key(?p, ?c) &*& \
           encrypted == cg_asym_encrypted(p, c, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(key) &*& \
           [_]PREFIX##_pub(encrypted); \
  ensures  [_]public_generated(PREFIX##_pub)(pay); \
{ \
  open  [_]PREFIX##_pub(key); \
  open  [_]PREFIX##_pub(encrypted); \
  \
  POLARSSL_SWITCH_1(PREFIX, cg_private_key(p, c)); \
  assert true == bad(p); \
}

#define DEFAULT_IS_PUBLIC_ASYMMETRIC_SIGNATURE(PREFIX) \
lemma void public_asym_signature_is_public(cryptogram sig) \
  requires sig == cg_asym_signature(?p, ?c, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(cg_private_key(p, c)) &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(sig); \
{ \
  open  [_]PREFIX##_pub(cg_private_key(p, c)); \
  POLARSSL_SWITCH(PREFIX, cg_private_key(p, c), 1); \
  close PREFIX##_pub(sig); \
  leak PREFIX##_pub(sig); \
}

#define PUBLIC_INVARIANT_ASSUME(PREFIX) \
  ASSUME_IS_PUBLIC_RANDOM(PREFIX) \
  ASSUME_IS_PUBLIC_KEY(PREFIX) \
  ASSUME_IS_PUBLIC_PUBLIC_KEY(PREFIX) \
  ASSUME_IS_PUBLIC_PRIVATE_KEY(PREFIX) \
  ASSUME_IS_PUBLIC_HASH(PREFIX) \
  ASSUME_IS_PUBLIC_HMAC(PREFIX) \
  ASSUME_IS_PUBLIC_ENCRYPTED(PREFIX) \
  ASSUME_IS_PUBLIC_DECRYPTED(PREFIX) \
  ASSUME_IS_ENCRYPTION_ALLOWED(PREFIX) \
  ASSUME_IS_PUBLIC_AUTH_ENCRYPTED(PREFIX) \
  ASSUME_IS_PUBLIC_AUTH_DECRYPTED(PREFIX) \
  ASSUME_IS_PUBLIC_ASYMMETRIC_ENCRYPTED(PREFIX) \
  ASSUME_IS_PUBLIC_ASYMMETRIC_DECRYPTED(PREFIX) \
  ASSUME_IS_PUBLIC_ASYMMETRIC_SIGNATURE(PREFIX) \

#define ASSUME_IS_PUBLIC_RANDOM(PREFIX) \
lemma void PREFIX##_bad_random_is_public(cryptogram random) \
  requires random == cg_random(?p, _) &*& \
           true == bad(p); \
  ensures  [_]PREFIX##_pub(random); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_KEY(PREFIX) \
lemma void PREFIX##_bad_key_is_public(cryptogram key) \
  requires key == cg_symmetric_key(?p, _) &*& \
           true == bad(p); \
  ensures  [_]PREFIX##_pub(key); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_PUBLIC_KEY(PREFIX) \
lemma void public_key_is_public(cryptogram key) \
  requires key == cg_public_key(_, _); \
  ensures  [_]PREFIX##_pub(key); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_PRIVATE_KEY(PREFIX) \
lemma void PREFIX##_bad_private_key_is_public(cryptogram key) \
  requires key == cg_private_key(?p, _) &*& \
           bad(p) == true; \
  ensures  [_]PREFIX##_pub(key); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_HASH(PREFIX) \
lemma void PREFIX##_hash_is_public(cryptogram hash) \
  requires hash == cg_hash(?pay) &*& \
           length(pay) <= INT_MAX &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(hash); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_HMAC(PREFIX) \
lemma void public_hmac_is_public(cryptogram hmac) \
  requires hmac == cg_hmac(?p, ?c, ?pay) &*& \
           length(pay) <= INT_MAX &*& \
           [_]PREFIX##_pub(cg_symmetric_key(p, c)) &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(hmac); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_ENCRYPTED(PREFIX) \
lemma void public_encryption_is_public(cryptogram encrypted) \
  requires encrypted == cg_encrypted(?p, ?c, ?pay, ?ent) &*& \
           length(pay) <= INT_MAX &*& \
           [_]PREFIX##_pub(cg_symmetric_key(p, c)) &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(encrypted); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_DECRYPTED(PREFIX) \
lemma void public_decryption_is_public(cryptogram key, \
                                                    cryptogram encrypted) \
  requires key == cg_symmetric_key(?p, ?c) &*& \
           encrypted == cg_encrypted(p, c, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(key) &*& \
           [_]PREFIX##_pub(encrypted); \
  ensures  [_]public_generated(PREFIX##_pub)(pay); \
{ \
  assume (false); \
}

#define ASSUME_IS_DECRYPTION_ALLOWED(PREFIX) \
lemma void decryption_allowed(cryptogram key, list<char> cs) \
  requires key == cg_symmetric_key(?p, ?c) &*& \
           [_]public_generated(PREFIX##_pub)(cs); \
  ensures  exists<cryptogram>(?cg_pay) &*& \
           [_]PREFIX##_pub(cg_encrypted(p, c, chars_for_cg(cg_pay), _)); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_AUTH_ENCRYPTED(PREFIX) \
lemma void public_auth_encryption_is_public(cryptogram encrypted) \
  requires encrypted == cg_auth_encrypted(?p, ?c, ?mac, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(cg_symmetric_key(p, c)) &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(encrypted); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_AUTH_DECRYPTED(PREFIX) \
lemma void public_auth_decryption_is_public( \
                         cryptogram key, cryptogram encrypted) \
  requires key == cg_symmetric_key(?p, ?c) &*& \
           encrypted == cg_auth_encrypted(p, c, ?mac, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(key) &*& \
           [_]PREFIX##_pub(encrypted); \
  ensures  [_]public_generated(PREFIX##_pub)(pay); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_ASYMMETRIC_ENCRYPTED(PREFIX) \
lemma void public_asym_encryption_is_public(cryptogram encrypted) \
  requires encrypted == cg_asym_encrypted(?p, ?c, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(cg_public_key(p, c)) &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(encrypted); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_ASYMMETRIC_DECRYPTED(PREFIX) \
lemma void public_asym_decryption_is_public(cryptogram key, \
                                                         cryptogram encrypted) \
  requires key == cg_private_key(?p, ?c) &*& \
           encrypted == cg_asym_encrypted(p, c, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(key) &*& \
           [_]PREFIX##_pub(encrypted); \
  ensures  [_]public_generated(PREFIX##_pub)(pay); \
{ \
  assume (false); \
}

#define ASSUME_IS_PUBLIC_ASYMMETRIC_SIGNATURE(PREFIX) \
lemma void public_asym_signature_is_public(cryptogram sig) \
  requires sig == cg_asym_signature(?p, ?c, ?pay, ?ent) &*& \
           [_]PREFIX##_pub(cg_private_key(p, c)) &*& \
           [_]public_generated(PREFIX##_pub)(pay); \
  ensures  [_]PREFIX##_pub(sig); \
{ \
  assume (false); \
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#define POLARSSL_SWITCH(PREFIX, root, LEVEL) \
  POLARSSL_SWITCH_##LEVEL(PREFIX, root)

#define POLARSSL_SWITCH_LIST(PREFIX, root, LEVEL) \
switch(root) \
{ \
  case cons(cg___, cgs___): \
    assert  [_]PREFIX##_polarssl_pub(cgs___); \
    POLARSSL_SWITCH(PREFIX, cg___, LEVEL); \
  case nil: \
    assert true; \
}

#define POLARSSL_SWITCH_1(PREFIX, root) \
switch (root) \
{ \
  case cg_random(p__1, c__1): \
    assert true; \
  case cg_symmetric_key(p__1, c__1): \
    assert true; \
  case cg_public_key(p__1, c__1): \
    assert true; \
  case cg_private_key(p__1, c__1): \
    assert true; \
  case cg_hash(cs__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case cg_hmac(p__1, c__1, cs__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case cg_encrypted(p__1, c__1, cs__1, ent__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case cg_auth_encrypted(p__1, c__1, mac__1, cs__1, ent__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case cg_asym_encrypted(p__1, c__1, cs__1, ent__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case cg_asym_signature(p__1, c__1, cs__1, ent__1): \
    switch(cs__1) \
    { \
      case cons(c__11, cs__11): \
        assert true; \
      case nil: \
        assert true; \
    }; \
}

#define POLARSSL_SWITCH_2(PREFIX, root) \
switch (root) \
{ \
  case cg_random(p__2, c__2): \
    assert true; \
  case cg_symmetric_key(p__2, c__2): \
    assert true; \
  case cg_public_key(p__2, c__2): \
    assert true; \
  case cg_private_key(p__2, c__2): \
    assert true; \
  case cg_hash(cs__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case cg_hmac(p__2, c__2, cs__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case cg_encrypted(p__2, c__2, cs__2, ent__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case cg_auth_encrypted(p__2, c__2, mac__2, cs__2, ent__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case cg_asym_encrypted(p__2, c__2, cs__2, ent__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
  case cg_asym_signature(p__2, c__2, cs__2, ent__2): \
    switch(cs__2) \
    { \
      case cons(c__22, cs__22): \
        assert true; \
      case nil: \
        assert true; \
    }; \
}

#endif
