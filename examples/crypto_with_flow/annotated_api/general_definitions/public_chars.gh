#ifndef PUBLIC_CHARS_GH
#define PUBLIC_CHARS_GH

#include "auxiliary_definitions.gh"
#include "cryptogram_levels.gh"
#include "public_invariant.gh"

lemma void public_chars(char *array, int n, list<char> cs);
  requires [_]public_invar(?pub) &*&
           [?f]chars(array, n, cs);
  ensures  [f]chars(array, n, cs) &*& 
           [_]public_generated(pub)(cs);

lemma void public_crypto_chars(char *array, int n, list<char> cs);
  requires [_]public_invar(?pub) &*&
           [?f]crypto_chars(array, n, cs) &*& 
           [_]public_generated(pub)(cs);
  ensures  [f]chars(array, n, cs);

//Derived lemmas

lemma void close_public_generated(list<char> cs);
  requires [_]public_invar(?pub) &*&
           [_]dummy_foreach(cgs_in_chars(cs), pub) &*&
           true == forall(cgs_in_chars(cs), cg_is_generated);
  ensures  [_]public_generated(pub)(cs);

lemma void public_cryptogram(char *array, cryptogram cg);
  requires [_]public_invar(?pub) &*&
           [?f]cryptogram(array, ?n, ?cs, cg) &*&
           [_]pub(cg);
  ensures  [f]chars(array, n, cs);

lemma void public_chars_extract(char *array, cryptogram cg);
  requires [_]public_invar(?pub) &*&
           [?f]chars(array, ?n, ?cs) &*&
           cs == chars_for_cg(cg);
  ensures  [f]chars(array, n, cs) &*&
           [_]pub(cg);

lemma void public_crypto_chars_extract(char *array, cryptogram cg);
  requires [_]public_invar(?pub) &*&
           [?f]crypto_chars(array, ?n, ?cs) &*&
           cs == chars_for_cg(cg) &*&
           [_]public_generated(pub)(cs);
  ensures  [f]crypto_chars(array, n, cs) &*&
           [_]pub(cg);

lemma void public_cryptogram_extract(char *array);
  requires [_]public_invar(?pub) &*&
           [?f]cryptogram(array, ?n, ?cs, ?cg) &*&
           [_]public_generated(pub)(cs);
  ensures  [f]cryptogram(array, n, cs, cg) &*&
           collision_in_run ? true : [_]pub(cg);

#endif