#ifndef CRYPTOGRAM_LEVELS_GH
#define CRYPTOGRAM_LEVELS_GH

#include "auxiliary_definitions.gh"
#include "cryptogram.gh"

//How deep are cryptograms nested through their payload?
fixpoint nat cg_level(cryptogram cg);

//Upper bound on the nesting of cryptograms.
fixpoint bool cg_level_upper_bound(nat bound, cryptogram cg)
{
  return int_of_nat(cg_level(cg)) < int_of_nat(bound);
}

//Maximum upper bound on the nesting of cryptograms.
fixpoint nat cg_level_max();

lemma_auto void cg_level_(cryptogram cg);
  requires true;
  ensures  true == cg_level_upper_bound(cg_level_max(), cg) &&
           (cg_payload(cg) != none) == (cg_level(cg) != zero);

//Induction is only allowed for generated cryptograms to prevent crypto
//cycles during induction, e.g. E(...E(E(E(m)))) == m:
//If only cryptograms generated in some run are considered, then no cycle
//can occur unless there is a collusion.
lemma void cg_level_ind(cryptogram cg1, cryptogram cg2);
  requires true == cg_is_generated(cg1) &*&
           cg_payload(cg1) == some(?pay) &*&
           true == mem(cg2, cgs_in_chars(pay));
  ensures  true == cg_level_upper_bound(cg_level(cg1), cg2);

//Proven lemmas

lemma void cg_level_max_forall(list<cryptogram> cgs);
  requires true;
  ensures  true == forall(cgs, (cg_level_upper_bound)(cg_level_max));

lemma void cg_level_pay(cryptogram cg, nat bound);
  requires cg_payload(cg) == some(?pay) &*& cg_is_generated(cg) &&
           cg_level_upper_bound(succ(bound), cg);
  ensures  true == forall(cgs_in_chars(pay), (cg_level_upper_bound)(bound));

#endif
